services:
  web-react:
    env_file:
      - .env
    build:
      context: ./web-react
      dockerfile: Dockerfile.react
      args:
        - REACT_APP_API_URL=/api
        - REACT_APP_API_KEY=${API_KEY:-development_key_for_testing}
        - REACT_APP_GRAFANA_URL=/grafana
        - REACT_APP_GRAFANA_DASHBOARD_ID=7d1a6a29-626f-4f4d-a997-e7d0a7c3f872
        - REACT_APP_GRAFANA_PANEL_ID=2
    container_name: web_react_service
    restart: unless-stopped
    ports:
      - "3003:80"  # Memetakan port 80 container ke port 3003 host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/index.html"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api  # URL API untuk client-side dalam production akan di-proxy oleh nginx
      - REACT_APP_API_KEY=${API_KEY:-development_key_for_testing}
      - REACT_APP_GRAFANA_URL=/grafana  # URL untuk akses dari browser client, di-proxy oleh nginx
      - REACT_APP_GRAFANA_DASHBOARD_ID=7d1a6a29-626f-4f4d-a997-e7d0a7c3f872
      - REACT_APP_GRAFANA_PANEL_ID=2
      - REACT_APP_DEBUG_ENV=true  # Enable environment debugging
      - REACT_APP_DEBUG_API=true  # Enable API debugging
    depends_on:
      - api
    networks:
      - app_network

  api:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_service
    restart: unless-stopped
    ports:
      - "8002:8002"  # Port untuk FastAPI
    depends_on:
      - influxdb
    environment:
      - PYTHONUNBUFFERED=1
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=th1s_1s_a_v3ry_s3cur3_4nd_l0ng_4dm1n_t0k3n_f0r_d3v
      - INFLUXDB_ORG=iot_project_alpha
      - INFLUXDB_BUCKET=sensor_data_primary
      - CORS_ORIGINS=http://localhost:3003,http://web-react:80,http://10.13.0.4:3003,*
      - VALID_API_KEYS=${API_KEY:-development_key_for_testing}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    command: python -m uvicorn api:app --host 0.0.0.0 --port 8002 --reload
    networks:
      - app_network

  influxdb:
    image: influxdb:latest # Ini akan mengambil image InfluxDB 2.x atau 3.x terbaru
    container_name: influxdb_service
    restart: unless-stopped
    ports:
      - "8086:8086" # Memetakan port InfluxDB default ke host Anda
    volumes:
      # Volume untuk menyimpan data InfluxDB secara persisten
      # Data akan tetap ada meskipun container dihentikan atau dihapus
      - influxdb_data_volume:/var/lib/influxdb2
      # Opsional: Volume untuk menyimpan konfigurasi InfluxDB secara persisten
      # Berguna jika Anda ingin mengelola file konfigurasi secara manual
      # - ./my_influxdb_config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup # Mode setup untuk inisialisasi
      - DOCKER_INFLUXDB_INIT_USERNAME=admin_user # Ganti dengan username yang Anda inginkan
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin_password # Ganti dengan password yang kuat
      - DOCKER_INFLUXDB_INIT_ORG=iot_project_alpha
      - DOCKER_INFLUXDB_INIT_BUCKET=sensor_data_primary
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=th1s_1s_a_v3ry_s3cur3_4nd_l0ng_4dm1n_t0k3n_f0r_d3v
    networks:
      - app_network

  bmkg_collector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bmkg_collector_service
    restart: unless-stopped
    depends_on:
      - influxdb
    environment:
      # Pastikan variabel lingkungan ini sesuai dengan yang ada di bmkg_data_collector.py
      # atau lebih baik, baca dari environment variables di dalam skrip Python.
      - PYTHONUNBUFFERED=1 # Mencegah buffering output Python agar log terlihat
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=th1s_1s_a_v3ry_s3cur3_4nd_l0ng_4dm1n_t0k3n_f0r_d3v
      - INFLUXDB_ORG=iot_project_alpha
      - INFLUXDB_BUCKET=sensor_data_primary
      - BMKG_KODE_WILAYAH=31.74.04.1003 # Kode wilayah yang diperbarui
      # Tambahkan variabel lain yang mungkin dibutuhkan oleh skrip Anda
    networks:
      - app_network

  telegraf:
    image: telegraf:latest
    container_name: telegraf_service
    restart: unless-stopped
    depends_on:
      - influxdb # Pastikan InfluxDB dimulai sebelum Telegraf
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro # Mount file konfigurasi Telegraf (read-only)
      # Opsional: Jika Anda ingin Telegraf memiliki akses ke device_list.csv (misalnya untuk plugin 'file')
      # - ./device_list.csv:/etc/telegraf/device_list.csv:ro
    networks:
      - app_network
    # Jaringan diperlukan agar Telegraf dapat mencapai InfluxDB dengan nama service 'influxdb'
    # dan juga perangkat di jaringan host jika IP perangkat adalah IP di jaringan lokal Anda.
    # Jika perangkat berada di jaringan Docker yang sama, 'default' network sudah cukup.
    # Jika perangkat berada di luar Docker (misalnya, LAN fisik), Anda mungkin memerlukan 'host' network mode
    # atau konfigurasi jaringan Docker yang lebih canggih.
    # Untuk kesederhanaan awal, kita asumsikan Telegraf bisa mencapai IP perangkat.
    # Jika InfluxDB dan Telegraf berada di bridge network yang sama (default oleh Compose),
    # Telegraf bisa menghubungi InfluxDB via 'http://influxdb:8086'.
    # Untuk Telegraf menghubungi perangkat di 10.6.0.x, container Telegraf perlu berada di jaringan yang sama
    # atau memiliki rute ke jaringan tersebut. Jika 10.6.0.x adalah jaringan host Anda,
    # Anda mungkin perlu menambahkan `network_mode: "host"` pada layanan telegraf,
    # TAPI INI AKAN MEMBUAT PORT MAPPING INFLUXDB (8086:8086) TIDAK BERLAKU JIKA INFLUXDB JUGA HOST MODE.
    # Alternatif: buat custom bridge network dan hubungkan kedua container.
    # Untuk sekarang, kita biarkan default, yang berarti Telegraf dan InfluxDB ada di bridge network yang sama.
    # Akses ke 10.6.0.x dari dalam container Telegraf akan bergantung pada setup jaringan Docker host Anda.
    # Jika 10.6.0.x adalah IP di LAN Anda dan Docker host bisa mencapainya,
    # maka container Telegraf (dengan network default bridge) juga seharusnya bisa.
    # Karena network_mode: "host" digunakan, blok 'networks' di bawah ini harus dihapus.

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana_service
    restart: unless-stopped
    ports:
      - "3001:3000" # Memetakan port Grafana default ke host Anda
    volumes:
      - grafana_data_volume:/var/lib/grafana
    environment:
      # Konfigurasi dasar Grafana
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=padipadi
      
      # Konfigurasi untuk iframe embedding
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=disabled
      - GF_SECURITY_COOKIE_SECURE=false
      
      # Konfigurasi untuk mendukung kedua metode akses (langsung dan proxy)
      # Menggunakan root URL default Grafana tanpa redirect paksa
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      
      # Disable redirect enforcement untuk multi-access support
      - GF_SERVER_ENFORCE_DOMAIN=false
      
      # Disable user signup
      - GF_USERS_ALLOW_SIGN_UP=false
      
      # Anonymous access untuk development
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      
      # Enable CORS untuk iframe
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=false
    depends_on:
      - influxdb
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  influxdb_data_volume:
    driver: local
  grafana_data_volume: # Volume untuk menyimpan data Grafana
    driver: local